#!/usr/bin/env python
"""
–í–∞–ª—ñ–¥–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏
"""
import os
import sys
import json
import django

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')
django.setup()

import logging
from django.conf import settings

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def validate_json_file():
    """–í–∞–ª—ñ–¥—É—î–º–æ JSON —Ñ–∞–π–ª"""
    logger.info("üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è JSON —Ñ–∞–π–ª—É...")
    
    data_file = os.path.join(settings.BASE_DIR, 'data.json')
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    if not os.path.exists(data_file):
        logger.error(f"‚ùå –§–∞–π–ª {data_file} –Ω–µ —ñ—Å–Ω—É—î")
        return False
    
    try:
        # –ß–∏—Ç–∞—î–º–æ JSON
        with open(data_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        logger.info("‚úÖ JSON —Ñ–∞–π–ª –≤–∞–ª—ñ–¥–Ω–∏–π")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —Å–µ–∫—Ü—ñ—ó
        required_sections = [
            'site_settings',
            'main_product', 
            'color_options',
            'quantity_options',
            'additional_products',
            'additional_settings',
            'contact_info',
            'services',
            'about_section'
        ]
        
        for section in required_sections:
            if section in data:
                logger.info(f"‚úÖ –°–µ–∫—Ü—ñ—è '{section}' –ø—Ä–∏—Å—É—Ç–Ω—è")
            else:
                logger.warning(f"‚ö†Ô∏è –°–µ–∫—Ü—ñ—è '{section}' –≤—ñ–¥—Å—É—Ç–Ω—è")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ site_settings
        if 'site_settings' in data:
            site_settings = data['site_settings']
            if 'site_title' in site_settings and 'site_description' in site_settings:
                logger.info("‚úÖ site_settings –º–∞—î –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è")
            else:
                logger.error("‚ùå site_settings –Ω–µ –º–∞—î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤")
        
        return True
        
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {e}")
        return False

def validate_templates():
    """–í–∞–ª—ñ–¥—É—î–º–æ —à–∞–±–ª–æ–Ω–∏"""
    logger.info("üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è —à–∞–±–ª–æ–Ω—ñ–≤...")
    
    templates_dir = os.path.join(settings.BASE_DIR, 'templates')
    
    # –û—Å–Ω–æ–≤–Ω—ñ —à–∞–±–ª–æ–Ω–∏
    main_templates = [
        'index.html',
        'base.html',
        'header.html'
    ]
    
    for template in main_templates:
        template_path = os.path.join(templates_dir, template)
        if os.path.exists(template_path):
            logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω {template} —ñ—Å–Ω—É—î")
        else:
            logger.warning(f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω {template} –Ω–µ —ñ—Å–Ω—É—î")
    
    # –®–∞–±–ª–æ–Ω–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
    admin_templates_dir = os.path.join(templates_dir, 'admin_panel')
    admin_templates = [
        'base.html',
        'dashboard.html',
        'site_settings.html',
        'main_product_settings.html',
        'color_options.html',
        'quantity_options.html',
        'additional_products.html',
        'services.html',
        'contact_info.html',
        'about_section.html'
    ]
    
    for template in admin_templates:
        template_path = os.path.join(admin_templates_dir, template)
        if os.path.exists(template_path):
            logger.info(f"‚úÖ –ê–¥–º—ñ–Ω —à–∞–±–ª–æ–Ω {template} —ñ—Å–Ω—É—î")
        else:
            logger.error(f"‚ùå –ê–¥–º—ñ–Ω —à–∞–±–ª–æ–Ω {template} –Ω–µ —ñ—Å–Ω—É—î")

def validate_static_files():
    """–í–∞–ª—ñ–¥—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏"""
    logger.info("üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
    
    static_dir = os.path.join(settings.BASE_DIR, 'static')
    
    static_files = [
        'css/style.css',
        'js/main.js'
    ]
    
    for static_file in static_files:
        file_path = os.path.join(static_dir, static_file)
        if os.path.exists(file_path):
            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª {static_file} —ñ—Å–Ω—É—î")
        else:
            logger.error(f"‚ùå –°—Ç–∞—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª {static_file} –Ω–µ —ñ—Å–Ω—É—î")

def validate_json_manager():
    """–í–∞–ª—ñ–¥—É—î–º–æ JSONManager"""
    logger.info("üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è JSONManager...")
    
    try:
        from json_manager import JSONManager
        logger.info("‚úÖ JSONManager —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è")
        
        json_manager = JSONManager()
        logger.info("‚úÖ JSONManager —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è")
        
        # –¢–µ—Å—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç–æ–¥–∏
        site_settings = json_manager.get_site_settings()
        logger.info(f"‚úÖ get_site_settings –ø—Ä–∞—Ü—é—î: {site_settings}")
        
        main_product = json_manager.get_main_product()
        logger.info(f"‚úÖ get_main_product –ø—Ä–∞—Ü—é—î: {main_product}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ JSONManager: {e}")
        return False

def validate_views():
    """–í–∞–ª—ñ–¥—É—î–º–æ views"""
    logger.info("üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è views...")
    
    try:
        from django.test import Client
        client = Client()
        
        # –¢–µ—Å—Ç—É—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        response = client.get('/')
        if response.status_code == 200:
            logger.info("‚úÖ –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–∞—Ü—é—î")
        else:
            logger.error(f"‚ùå –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å
        response = client.get('/admin-panel/')
        if response.status_code == 200:
            logger.info("‚úÖ –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –ø—Ä–∞—Ü—é—î")
        else:
            logger.error(f"‚ùå –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è views: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"""
    logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏")
    
    all_ok = True
    
    # –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    if not validate_json_file():
        all_ok = False
    
    validate_templates()
    validate_static_files()
    
    if not validate_json_manager():
        all_ok = False
    
    if not validate_views():
        all_ok = False
    
    if all_ok:
        logger.info("üéâ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        logger.error("‚ùå –î–µ—è–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è")
    
    return all_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
