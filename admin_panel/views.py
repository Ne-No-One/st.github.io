from django.shortcuts import render, redirect
from django.contrib import messages
from django.http import HttpResponse

def admin_dashboard(request):
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–º–∞–∫—Å–∏–º—É–º 5)
        all_orders = json_manager.get_orders()
        recent_orders = sorted(all_orders, key=lambda x: x.get('date', ''), reverse=True)[:5]
        
        context = {
            'site_settings': json_manager.get_site_settings(),
            'main_product': json_manager.get_main_product(),
            'additional_products_count': len(json_manager.get_additional_products()),
            'color_options_count': len(json_manager.get_color_options()),
            'quantity_options_count': len(json_manager.get_quantity_options()),
            'services_count': len(json_manager.get_services()),
            'contact_info': json_manager.get_contact_info(),
            'about_section': json_manager.get_about_section(),
            # –ù–æ–≤—ñ –¥–∞–Ω—ñ
            'orders_count': len(all_orders),
            'customers_count': len(json_manager.get_customers()),
            'inventory_count': len(json_manager.get_inventory()),
            'low_stock_count': len(json_manager.get_low_stock_items()),
            'recent_orders': recent_orders,
        }
        return render(request, 'admin_panel/dashboard.html', context)
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ: {e}")

def site_settings(request):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∞–π—Ç—É"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        settings_obj = json_manager.get_site_settings()

        if request.method == 'POST':
            site_title = request.POST.get('site_title', '').strip()
            site_description = request.POST.get('site_description', '').strip()
            cart_button_text = request.POST.get('cart_button_text', '').strip()
            premium_label_text = request.POST.get('premium_label_text', '').strip()
            header_subtitle = request.POST.get('header_subtitle', '').strip()

            if not site_title:
                messages.error(request, '–ù–∞–∑–≤–∞ —Å–∞–π—Ç—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é!')
            elif not site_description:
                messages.error(request, '–û–ø–∏—Å —Å–∞–π—Ç—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!')
            else:
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
                main_product_title = request.POST.get('main_product_title', '').strip()
                main_product_add_to_cart_text = request.POST.get('main_product_add_to_cart_text', '').strip()
                main_product_order = request.POST.get('main_product_order', '1').strip()
                main_product_currency = request.POST.get('main_product_currency', '–≥—Ä–Ω').strip()
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
                color_selector_title = request.POST.get('color_selector_title', '').strip()
                quantity_selector_title = request.POST.get('quantity_selector_title', '').strip()
                additional_products_title = request.POST.get('additional_products_title', '').strip()
                add_all_text = request.POST.get('add_all_text', '').strip()
                main_product_premium_label = request.POST.get('main_product_premium_label', '').strip()
                b2b_button_text = request.POST.get('b2b_button_text', '').strip()
                contact_phone = request.POST.get('contact_phone', '').strip()
                contact_email = request.POST.get('contact_email', '').strip()
                contact_address = request.POST.get('contact_address', '').strip()
                about_title = request.POST.get('about_title', '').strip()
                about_description = request.POST.get('about_description', '').strip()
                cart_count_label = request.POST.get('cart_count_label', '').strip()
                currency_symbol = request.POST.get('currency_symbol', '').strip()
                loading_text = request.POST.get('loading_text', '').strip()
                error_text = request.POST.get('error_text', '').strip()
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∞–π—Ç—É
                updated_settings = {
                    'site_title': site_title,
                    'site_description': site_description,
                    'cart_button_text': cart_button_text or '–í –∫–æ—à–∏–∫',
                    'premium_label_text': premium_label_text or '–ü—Ä–µ–º—ñ—É–º',
                    'header_subtitle': header_subtitle or '–ö—Ä–∞—Å–∏–≤—ñ –∫–≤—ñ—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–¥—ñ–π',
                    'color_selector_title': color_selector_title or '–∫–æ–ª—ñ—Ä –ø–∞–∫—É–≤–∞–Ω–Ω—è',
                    'quantity_selector_title': quantity_selector_title or '–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤—ñ—Ç—ñ–≤',
                    'b2b_button_text': b2b_button_text or 'B2B',
                    'cart_count_label': cart_count_label or '—à—Ç',
                    'currency_symbol': currency_symbol or '–≥—Ä–Ω',
                    'loading_text': loading_text or '–°–∞–π—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...',
                    'error_text': error_text or '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∞–π—Ç—É'
                }
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —Ç–æ–≤–∞—Ä
                try:
                    order_int = int(main_product_order) if main_product_order else 1
                except ValueError:
                    order_int = 1
                    
                updated_main_product = {
                    'title': main_product_title or '–ü—Ä–µ–º—ñ—É–º –±—É–∫–µ—Ç –∫–≤—ñ—Ç—ñ–≤',
                    'add_to_cart_text': main_product_add_to_cart_text or '–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫',
                    'order': order_int,
                    'currency': main_product_currency or '–≥—Ä–Ω',
                    'premium_label_text': main_product_premium_label or '‚≠ê –ü—Ä–µ–º—ñ—É–º —è–∫—ñ—Å—Ç—å'
                }
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                updated_additional_settings = {
                    'section_title': additional_products_title or '–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏',
                    'add_all_text': add_all_text or '–î–æ–¥–∞—Ç–∏ –≤—Å—ñ'
                }
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                updated_contact_info = {
                    'phone': contact_phone or '+380 XX XXX XX XX',
                    'email': contact_email or 'info@example.com',
                    'address': contact_address or '–º. –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1'
                }
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ–∫—Ü—ñ—é "–ü—Ä–æ –Ω–∞—Å"
                updated_about_section = {
                    'title': about_title or '–ü—Ä–æ –Ω–∞—Å',
                    'description': about_description or '–ú–∏ - –ø—Ä–æ–≤—ñ–¥–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è —É —Å—Ñ–µ—Ä—ñ –∫–≤—ñ—Ç—ñ–≤ –∑ –±–∞–≥–∞—Ç–æ—Ä—ñ—á–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º.'
                }
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ –∑–º—ñ–Ω–∏
                site_updated = json_manager.update_site_settings(**updated_settings)
                product_updated = json_manager.update_main_product(**updated_main_product)
                additional_updated = json_manager.update_additional_settings(**updated_additional_settings)
                contact_updated = json_manager.update_contact_info(**updated_contact_info)
                about_updated = json_manager.update_about_section(**updated_about_section)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
                success_count = sum([site_updated, product_updated, additional_updated, contact_updated, about_updated])
                total_count = 5
                
                if success_count == total_count:
                    messages.success(request, '–í—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ! üéâ')
                elif success_count > 0:
                    messages.warning(request, f'–ß–∞—Å—Ç–∫–æ–≤–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: {success_count}/{total_count} —Å–µ–∫—Ü—ñ–π –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.')
                else:
                    messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å!')
            return redirect('admin_panel:site_settings')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        main_product = json_manager.get_main_product()
        additional_settings = json_manager.get_additional_settings()
        contact_info = json_manager.get_contact_info()
        about_section = json_manager.get_about_section()
        
        context = {
            'settings': settings_obj,
            'main_product': main_product,
            'additional_settings': additional_settings,
            'contact_info': contact_info,
            'about_section': about_section,
            'site_settings': settings_obj  # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
        }
        return render(request, 'admin_panel/site_settings.html', context)
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def main_product_settings(request):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É —Ç–∞ –π–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        main_product = json_manager.get_main_product()
        colors = json_manager.get_color_options()

        if request.method == 'POST':
            action = request.POST.get('action')
            
            if action == 'update_product':
                title = request.POST.get('title', '').strip()
                cart_button_text = request.POST.get('cart_button_text', '').strip()
                order = request.POST.get('order', '1').strip()

                if not title:
                    messages.error(request, '–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é!')
                else:
                    try:
                        order_int = int(order) if order else 1
                    except ValueError:
                        order_int = 1
                    
                    updated_data = {
                        'title': title,
                        'currency': '–≥—Ä–Ω',  # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –≤–∞–ª—é—Ç–∞
                        'add_to_cart_text': cart_button_text or '–í –∫–æ—à–∏–∫',
                        'order': order_int
                    }
                    if json_manager.update_main_product(**updated_data):
                        messages.success(request, '–ì–æ–ª–æ–≤–Ω–∏–π —Ç–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
                    else:
                        messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É!')
            
            elif action == 'add_variant':
                try:
                    name = request.POST.get('variant_name', '').strip()
                    hex_code = request.POST.get('hex_code', '').strip()
                    image_url = request.POST.get('image_url', '').strip()
                    order = request.POST.get('variant_order', '1').strip()
                    
                    print(f"üîç –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—É: name='{name}', hex='{hex_code}', url='{image_url}', order='{order}'")
                    
                    if not name or not hex_code or not image_url:
                        messages.error(request, '–í—Å—ñ –ø–æ–ª—è –≤–∞—Ä—ñ–∞–Ω—Ç—É —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏!')
                        print("‚ùå –ù–µ –≤—Å—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ")
                    elif not hex_code.startswith('#') or len(hex_code) != 7:
                        messages.error(request, 'Hex-–∫–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç #rrggbb!')
                        print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π hex-–∫–æ–¥: {hex_code}")
                    else:
                        try:
                            order_int = int(order) if order else 1
                        except ValueError:
                            order_int = 1
                        print("‚úÖ –í—Å—ñ –¥–∞–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ, –¥–æ–¥–∞—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç...")
                        result = json_manager.add_color_option(name, hex_code, image_url, order_int)
                        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è: {result}")
                        
                        if result:
                            messages.success(request, f'–í–∞—Ä—ñ–∞–Ω—Ç "{name}" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!')
                            print(f"‚úÖ –í–∞—Ä—ñ–∞–Ω—Ç '{name}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
                        else:
                            messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—É!')
                            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ JSON")
                except Exception as e:
                    error_msg = f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'
                    messages.error(request, error_msg)
                    print(f"üí• –í–∏–∫–ª—é—á–µ–Ω–Ω—è: {e}")
                    import traceback
                    traceback.print_exc()
            
            elif action == 'update_variant':
                variant_id = int(request.POST.get('variant_id'))
                name = request.POST.get('edit_variant_name', '').strip()
                hex_code = request.POST.get('edit_hex_code', '').strip()
                image_url = request.POST.get('edit_image_url', '').strip()
                
                if not name or not hex_code or not image_url:
                    messages.error(request, '–í—Å—ñ –ø–æ–ª—è –≤–∞—Ä—ñ–∞–Ω—Ç—É —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏!')
                else:
                    if json_manager.update_color_option(variant_id, name, hex_code, image_url):
                        messages.success(request, f'–í–∞—Ä—ñ–∞–Ω—Ç "{name}" —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
                    else:
                        messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—É!')
                        
            elif action == 'add_quantity':
                try:
                    quantity = int(request.POST.get('quantity', 0))
                    price_per_unit = float(request.POST.get('price_per_unit', 0))
                    order = request.POST.get('quantity_order', '1').strip()
                    
                    if quantity <= 0:
                        messages.error(request, '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!')
                    elif price_per_unit <= 0:
                        messages.error(request, '–¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!')
                    else:
                        try:
                            order_int = int(order) if order else 1
                        except ValueError:
                            order_int = 1
                        if json_manager.add_quantity_option_with_price(quantity, price_per_unit, order_int):
                            messages.success(request, f'–í–∞—Ä—ñ–∞–Ω—Ç {quantity} —à—Ç –ø–æ {price_per_unit} –≥—Ä–Ω/—à—Ç –¥–æ–¥–∞–Ω–æ!')
                        else:
                            messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ!')
                except (ValueError, TypeError):
                    messages.error(request, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö!')
                    
            elif action == 'update_quantity':
                try:
                    quantity_id = int(request.POST.get('quantity_id'))
                    quantity = int(request.POST.get('edit_quantity', 0))
                    price_per_unit = float(request.POST.get('edit_price_per_unit', 0))
                    is_active = request.POST.get('edit_is_active') == 'on'
                    
                    if quantity <= 0 or price_per_unit <= 0:
                        messages.error(request, '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ —Ü—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!')
                    else:
                        if json_manager.update_quantity_option(quantity_id, quantity, price_per_unit, is_active):
                            messages.success(request, f'–í–∞—Ä—ñ–∞–Ω—Ç {quantity} —à—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!')
                        else:
                            messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ!')
                except (ValueError, TypeError):
                    messages.error(request, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö!')
            
            return redirect('admin_panel:main_product_settings')
        
        quantities = json_manager.get_quantity_options()
        
        context = {
            'product': main_product,
            'variants': colors,  # –ö–æ–ª—å–æ—Ä–∏
            'quantities': quantities  # –í–∞—Ä—ñ–∞–Ω—Ç–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        }
        return render(request, 'admin_panel/main_product_settings.html', context)
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def edit_color_variant(request, color_id):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        colors = json_manager.get_color_options()
        color = None
        for c in colors:
            if c['id'] == color_id:
                color = c
                break
        
        if not color:
            messages.error(request, '–ö–æ–ª—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!')
            return redirect('admin_panel:main_product_settings')
        
        if request.method == 'POST':
            name = request.POST.get('name', '').strip()
            hex_code = request.POST.get('hex_code', '').strip()
            image_url = request.POST.get('image_url', '').strip()
            is_active = request.POST.get('is_active') == 'on'
            
            if not name or not hex_code or not image_url:
                messages.error(request, '–í—Å—ñ –ø–æ–ª—è —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏!')
            elif not hex_code.startswith('#') or len(hex_code) != 7:
                messages.error(request, 'Hex-–∫–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç #rrggbb!')
            else:
                updated_color = {
                    'name': name,
                    'hex_code': hex_code,
                    'image_url': image_url,
                    'is_active': is_active
                }
                if json_manager.update_color_option(color_id, **updated_color):
                    messages.success(request, f'–ö–æ–ª—ñ—Ä "{name}" —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
                    return redirect('admin_panel:main_product_settings')
                else:
                    messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É!')
        
        context = {
            'color': color
        }
        return render(request, 'admin_panel/edit_color_variant.html', context)
    except Exception as e:
        messages.error(request, f'–ü–æ–º–∏–ª–∫–∞: {e}')
        return redirect('admin_panel:main_product_settings')

def delete_color_from_main(request, color_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        if json_manager.delete_color_option(color_id):
            messages.success(request, '–ö–æ–ª—ñ—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!')
        else:
            messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É!')
        return redirect('admin_panel:main_product_settings')
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def color_options(request):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–ª—å–æ—Ä–∞–º–∏"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        colors = json_manager.get_color_options()

        if request.method == 'POST':
            name = request.POST.get('name', '').strip()
            hex_code = request.POST.get('hex_code', '').strip()
            image_url = request.POST.get('image_url', '').strip()
            
            if not name or not hex_code:
                messages.error(request, '–ù–∞–∑–≤–∞ —Ç–∞ Hex-–∫–æ–¥ –∫–æ–ª—å–æ—Ä—É –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏!')
            else:
                if json_manager.add_color_option(name, hex_code, image_url):
                    messages.success(request, '–ö–æ–ª—ñ—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!')
                else:
                    messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É!')
            return redirect('admin_panel:color_options')
        return render(request, 'admin_panel/color_options.html', {'colors': colors})
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def delete_color_option(request, color_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        if json_manager.delete_color_option(color_id):
            messages.success(request, '–ö–æ–ª—ñ—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!')
        else:
            messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É!')
        return redirect('admin_panel:color_options')
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def quantity_options(request):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—é"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        quantities = json_manager.get_quantity_options()

        if request.method == 'POST':
            quantity_str = request.POST.get('quantity', '').strip()
            if not quantity_str or not quantity_str.isdigit():
                messages.error(request, '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º!')
            else:
                quantity = int(quantity_str)
                if json_manager.add_quantity_option(quantity):
                    messages.success(request, '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!')
                else:
                    messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ!')
            return redirect('admin_panel:quantity_options')
        return render(request, 'admin_panel/quantity_options.html', {'quantities': quantities})
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def edit_quantity_variant(request, quantity_id):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        quantities = json_manager.get_quantity_options()
        quantity = None
        for q in quantities:
            if q['id'] == quantity_id:
                quantity = q
                break
        
        if not quantity:
            messages.error(request, '–í–∞—Ä—ñ–∞–Ω—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!')
            return redirect('admin_panel:main_product_settings')
        
        if request.method == 'POST':
            quantity_value = request.POST.get('quantity', '').strip()
            price_per_unit = request.POST.get('price_per_unit', '').strip()
            is_active = request.POST.get('is_active') == 'on'
            
            try:
                quantity_value = int(quantity_value)
                price_per_unit = float(price_per_unit)
                
                if quantity_value <= 0 or price_per_unit <= 0:
                    messages.error(request, '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ —Ü—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!')
                else:
                    updated_quantity = {
                        'quantity': quantity_value,
                        'price_per_unit': price_per_unit,
                        'is_active': is_active
                    }
                    if json_manager.update_quantity_option(quantity_id, **updated_quantity):
                        messages.success(request, f'–í–∞—Ä—ñ–∞–Ω—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ "{quantity_value}" —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
                        return redirect('admin_panel:main_product_settings')
                    else:
                        messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ!')
            except ValueError:
                messages.error(request, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª!')
        
        context = {
            'quantity': quantity
        }
        return render(request, 'admin_panel/edit_quantity_variant.html', context)
    except Exception as e:
        messages.error(request, f'–ü–æ–º–∏–ª–∫–∞: {e}')
        return redirect('admin_panel:main_product_settings')

def delete_quantity_option(request, quantity_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        if json_manager.delete_quantity_option(quantity_id):
            messages.success(request, '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!')
        else:
            messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ!')
        return redirect('admin_panel:quantity_options')
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def additional_products(request):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        products = json_manager.get_additional_products()

        if request.method == 'POST':
            title = request.POST.get('title', '').strip()
            description = request.POST.get('description', '').strip()
            price_str = request.POST.get('price', '').strip()
            currency = request.POST.get('currency', '').strip()
            image_url = request.POST.get('image_url', '').strip()

            if not title or not price_str or not price_str.replace('.', '', 1).isdigit():
                messages.error(request, '–ù–∞–∑–≤–∞ —Ç–∞ —Ü—ñ–Ω–∞ (—á–∏—Å–ª–æ) —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏!')
            else:
                price = float(price_str)
                if json_manager.add_additional_product(title, description, price, currency, image_url):
                    messages.success(request, '–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!')
                else:
                    messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É!')
            return redirect('admin_panel:additional_products')
        return render(request, 'admin_panel/additional_products.html', {'products': products})
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def edit_additional_product(request, product_id):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        products = json_manager.get_additional_products()
        product = None
        for p in products:
            if p['id'] == product_id:
                product = p
                break
        
        if not product:
            messages.error(request, '–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!')
            return redirect('admin_panel:additional_products')
        
        if request.method == 'POST':
            title = request.POST.get('title', '').strip()
            description = request.POST.get('description', '').strip()
            price_str = request.POST.get('price', '').strip()
            currency = request.POST.get('currency', '').strip()
            image_url = request.POST.get('image_url', '').strip()
            order = request.POST.get('order', '1').strip()

            if not title or not price_str or not price_str.replace('.', '', 1).isdigit():
                messages.error(request, '–ù–∞–∑–≤–∞ —Ç–∞ —Ü—ñ–Ω–∞ (—á–∏—Å–ª–æ) —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏!')
            else:
                try:
                    order_int = int(order) if order else 1
                except ValueError:
                    order_int = 1
                price = float(price_str)
                if json_manager.update_additional_product(product_id, title, description, price, currency, image_url, order_int):
                    messages.success(request, '–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
                    return redirect('admin_panel:additional_products')
                else:
                    messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É!')
        
        return render(request, 'admin_panel/edit_additional_product.html', {'product': product})
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def delete_additional_product(request, product_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        if json_manager.delete_additional_product(product_id):
            messages.success(request, '–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!')
        else:
            messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É!')
        return redirect('admin_panel:additional_products')
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def about_section(request):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ–∫—Ü—ñ—î—é '–ü—Ä–æ –Ω–∞—Å'"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        about = json_manager.get_about_section()

        if request.method == 'POST':
            title = request.POST.get('title', '').strip()
            description = request.POST.get('description', '').strip()
            show_section = request.POST.get('show_section') == 'on'

            if not title or not description:
                messages.error(request, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –æ–ø–∏—Å —Å–µ–∫—Ü—ñ—ó "–ü—Ä–æ –Ω–∞—Å" –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏!')
            else:
                if json_manager.update_about_section(title, description, show_section):
                    messages.success(request, '–°–µ–∫—Ü—ñ—è "–ü—Ä–æ –Ω–∞—Å" —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞!')
                else:
                    messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó "–ü—Ä–æ –Ω–∞—Å"!')
            return redirect('admin_panel:about_section')
        return render(request, 'admin_panel/about_section.html', {'about': about})
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def services(request):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∞–º–∏"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        services_list = json_manager.get_services()

        if request.method == 'POST':
            title = request.POST.get('title', '').strip()
            description = request.POST.get('description', '').strip()
            icon = request.POST.get('icon', '').strip()

            if not title or not description or not icon:
                messages.error(request, '–í—Å—ñ –ø–æ–ª—è –ø–æ—Å–ª—É–≥–∏ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏!')
            else:
                if json_manager.add_service(title, description, icon):
                    messages.success(request, '–ü–æ—Å–ª—É–≥—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!')
                else:
                    messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏!')
            return redirect('admin_panel:services')
        return render(request, 'admin_panel/services.html', {'services': services_list})
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def delete_service(request, service_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        if json_manager.delete_service(service_id):
            messages.success(request, '–ü–æ—Å–ª—É–≥—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!')
        else:
            messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏!')
        return redirect('admin_panel:services')
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def contact_info(request):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        contact = json_manager.get_contact_info()

        if request.method == 'POST':
            phone = request.POST.get('phone', '').strip()
            email = request.POST.get('email', '').strip()
            address = request.POST.get('address', '').strip()
            working_hours = request.POST.get('working_hours', '').strip()

            if not phone or not email or not address or not working_hours:
                messages.error(request, '–í—Å—ñ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏!')
            else:
                if json_manager.update_contact_info(phone, email, address, working_hours):
                    messages.success(request, '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
                else:
                    messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó!')
            return redirect('admin_panel:contact_info')
        return render(request, 'admin_panel/contact_info.html', {'contact': contact})
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def about_section(request):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ–∫—Ü—ñ—î—é '–ü—Ä–æ –Ω–∞—Å'"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        about = json_manager.get_about_section()

        if request.method == 'POST':
            title = request.POST.get('title', '').strip()
            description = request.POST.get('description', '').strip()
            show_section = request.POST.get('show_section') == 'on'

            if not title or not description:
                messages.error(request, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –æ–ø–∏—Å —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏!')
            else:
                if json_manager.update_about_section(title, description, show_section):
                    messages.success(request, '–°–µ–∫—Ü—ñ—é "–ü—Ä–æ –Ω–∞—Å" —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
                else:
                    messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó "–ü—Ä–æ –Ω–∞—Å"!')
            return redirect('admin_panel:about_section')
        return render(request, 'admin_panel/about_section.html', {'about': about})
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# ===== ORDERS MANAGEMENT =====

def orders_list(request):
    """–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        # –§—ñ–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        status_filter = request.GET.get('status', 'all')
        
        if status_filter == 'all':
            orders = json_manager.get_orders()
        else:
            orders = json_manager.get_orders_by_status(status_filter)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        all_orders = json_manager.get_orders()
        stats = {
            'total': len(all_orders),
            'new': len([o for o in all_orders if o.get('status') == '–Ω–æ–≤–µ']),
            'processing': len([o for o in all_orders if o.get('status') == '–≤ –æ–±—Ä–æ–±—Ü—ñ']),
            'completed': len([o for o in all_orders if o.get('status') == '–≤–∏–∫–æ–Ω–∞–Ω–æ']),
            'cancelled': len([o for o in all_orders if o.get('status') == '—Å–∫–∞—Å–æ–≤–∞–Ω–æ'])
        }
        
        context = {
            'orders': orders,
            'current_filter': status_filter,
            'stats': stats
        }
        return render(request, 'admin_panel/orders_list.html', context)
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def order_detail(request, order_id):
    """–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        order = json_manager.get_order_by_id(order_id)
        if not order:
            messages.error(request, f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID {order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return redirect('admin_panel:orders_list')
        
        context = {'order': order}
        return render(request, 'admin_panel/order_detail.html', context)
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def update_order_status(request, order_id):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        from json_manager import JSONManager
        from datetime import datetime
        json_manager = JSONManager()
        
        if request.method == 'POST':
            new_status = request.POST.get('status')
            comment = request.POST.get('comment', '').strip()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            order = json_manager.get_order_by_id(order_id)
            if not order:
                messages.error(request, '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!')
                return redirect('admin_panel:orders_list')
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
            if json_manager.update_order_status(order_id, new_status):
                status_emoji = {
                    '–Ω–æ–≤–µ': 'üÜï',
                    '–≤ –æ–±—Ä–æ–±—Ü—ñ': '‚è≥', 
                    '–≤–∏–∫–æ–Ω–∞–Ω–æ': '‚úÖ',
                    '—Å–∫–∞—Å–æ–≤–∞–Ω–æ': '‚ùå'
                }
                
                emoji = status_emoji.get(new_status, '')
                messages.success(request, f'–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order.get("order_number")} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "{emoji} {new_status}"')
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
                if comment:
                    print(f"üìù –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order.get('order_number')} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_status}'. –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}")
                else:
                    print(f"üìù –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order.get('order_number')} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_status}'")
            else:
                messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!')
        
        return redirect('admin_panel:orders_list')
    except Exception as e:
        messages.error(request, f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return redirect('admin_panel:orders_list')

# ===== CUSTOMERS MANAGEMENT =====

def customers_list(request):
    """–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        customers = json_manager.get_customers()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_customers = len(customers)
        vip_customers = len([c for c in customers if c.get('total_spent', 0) > 5000])
        new_customers = len([c for c in customers if c.get('registration_date', '').startswith('2025-09')])
        
        context = {
            'customers': customers,
            'stats': {
                'total': total_customers,
                'vip': vip_customers,
                'new_this_month': new_customers
            }
        }
        return render(request, 'admin_panel/customers_list.html', context)
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def customer_detail(request, customer_id):
    """–î–µ—Ç–∞–ª—ñ –∫–ª—ñ—î–Ω—Ç–∞"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        customer = json_manager.get_customer_by_id(customer_id)
        if not customer:
            messages.error(request, f"–ö–ª—ñ—î–Ω—Ç –∑ ID {customer_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return redirect('admin_panel:customers_list')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
        all_orders = json_manager.get_orders()
        customer_orders = [order for order in all_orders 
                          if order.get('customer_name') == customer.get('name')]
        
        context = {
            'customer': customer,
            'customer_orders': customer_orders
        }
        return render(request, 'admin_panel/customer_detail.html', context)
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def add_customer(request):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        if request.method == 'POST':
            customer_data = {
                'name': request.POST.get('name'),
                'phone': request.POST.get('phone'),
                'email': request.POST.get('email'),
                'address': request.POST.get('address'),
                'birthday': request.POST.get('birthday'),
                'registration_date': request.POST.get('registration_date'),
                'total_orders': 0,
                'total_spent': 0.0,
                'loyalty_points': 0,
                'notes': request.POST.get('notes', '')
            }
            
            customer_id = json_manager.add_customer(customer_data)
            if customer_id:
                messages.success(request, f"–ö–ª—ñ—î–Ω—Ç '{customer_data['name']}' –¥–æ–¥–∞–Ω —É—Å–ø—ñ—à–Ω–æ")
                return redirect('admin_panel:customer_detail', customer_id=customer_id)
            else:
                messages.error(request, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞")
        
        return render(request, 'admin_panel/add_customer.html')
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def edit_customer(request, customer_id):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        customer = json_manager.get_customer_by_id(customer_id)
        if not customer:
            messages.error(request, f"–ö–ª—ñ—î–Ω—Ç –∑ ID {customer_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return redirect('admin_panel:customers_list')
        
        if request.method == 'POST':
            customer_data = {
                'name': request.POST.get('name'),
                'phone': request.POST.get('phone'),
                'email': request.POST.get('email'),
                'address': request.POST.get('address'),
                'birthday': request.POST.get('birthday'),
                'notes': request.POST.get('notes', '')
            }
            
            if json_manager.update_customer(customer_id, customer_data):
                messages.success(request, f"–î–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ")
                return redirect('admin_panel:customer_detail', customer_id=customer_id)
            else:
                messages.error(request, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞")
        
        context = {'customer': customer}
        return render(request, 'admin_panel/edit_customer.html', context)
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# ===== INVENTORY MANAGEMENT =====

def inventory_list(request):
    """–°–ø–∏—Å–æ–∫ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é"""
    try:
        from json_manager import JSONManager
        from datetime import datetime
        json_manager = JSONManager()
        
        # –û–±—Ä–æ–±–∫–∞ POST –∑–∞–ø–∏—Ç—ñ–≤
        if request.method == 'POST':
            action = request.POST.get('action')
            
            if action == 'add_item':
                name = request.POST.get('name', '').strip()
                category = request.POST.get('category', '').strip()
                current_stock = int(request.POST.get('current_stock', 0))
                min_stock = int(request.POST.get('min_stock', 1))
                unit = request.POST.get('unit', '—à—Ç').strip()
                supplier_price = float(request.POST.get('supplier_price', 0))
                selling_price = float(request.POST.get('selling_price', 0))
                
                new_item = {
                    'id': len(json_manager.get_inventory()) + 1,
                    'name': name,
                    'category': category,
                    'current_stock': current_stock,
                    'min_stock': min_stock,
                    'unit': unit,
                    'supplier_price': supplier_price,
                    'selling_price': selling_price,
                    'last_restock_date': datetime.now().strftime('%Y-%m-%d'),
                    'created_date': datetime.now().strftime('%Y-%m-%d')
                }
                
                if json_manager.add_inventory_item(new_item):
                    messages.success(request, f'–¢–æ–≤–∞—Ä "{name}" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!')
                else:
                    messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É!')
                    
            elif action == 'edit_item':
                item_id = int(request.POST.get('item_id'))
                name = request.POST.get('name', '').strip()
                category = request.POST.get('category', '').strip()
                min_stock = int(request.POST.get('min_stock', 1))
                unit = request.POST.get('unit', '—à—Ç').strip()
                supplier_price = float(request.POST.get('supplier_price', 0))
                selling_price = float(request.POST.get('selling_price', 0))
                
                update_data = {
                    'name': name,
                    'category': category,
                    'min_stock': min_stock,
                    'unit': unit,
                    'supplier_price': supplier_price,
                    'selling_price': selling_price
                }
                
                if json_manager.update_inventory_item(item_id, update_data):
                    messages.success(request, f'–¢–æ–≤–∞—Ä "{name}" —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
                else:
                    messages.error(request, '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É!')
        
        inventory = json_manager.get_inventory()
        low_stock_items = json_manager.get_low_stock_items()
        
        # –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∞–º–∏
        total_items = len(inventory)
        low_stock_count = len(low_stock_items)
        
        # –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
        total_purchase_cost = sum([item.get('current_stock', 0) * item.get('supplier_price', 0) for item in inventory])
        total_selling_value = sum([item.get('current_stock', 0) * item.get('selling_price', 0) for item in inventory])
        potential_profit = total_selling_value - total_purchase_cost
        profit_margin = (potential_profit / total_selling_value * 100) if total_selling_value > 0 else 0
        
        context = {
            'inventory': inventory,
            'low_stock_items': low_stock_items,
            'stats': {
                'total_items': total_items,
                'low_stock_count': low_stock_count,
                'total_purchase_cost': total_purchase_cost,
                'total_selling_value': total_selling_value,
                'potential_profit': potential_profit,
                'profit_margin': profit_margin
            }
        }
        return render(request, 'admin_panel/inventory_list.html', context)
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def update_inventory_stock(request, item_id):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–∞ —Å–∫–ª–∞–¥—ñ"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        if request.method == 'POST':
            new_stock = int(request.POST.get('new_stock', 0))
            if json_manager.update_stock(item_id, new_stock):
                messages.success(request, "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                messages.error(request, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–∫–ª–∞–¥—É")
        
        return redirect('admin_panel:inventory_list')
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# ===== FINANCIAL REPORTS =====

def financial_reports(request):
    """–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –∑–≤—ñ—Ç–∏"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        reports = json_manager.get_financial_reports()
        daily_sales = json_manager.get_daily_sales(limit=7)  # –û—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
        monthly_summary = json_manager.get_monthly_summary()
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        orders = json_manager.get_orders()
        customers = json_manager.get_customers()
        
        context = {
            'daily_sales': daily_sales,
            'monthly_summary': monthly_summary,
            'stats': {
                'total_orders': len(orders),
                'total_customers': len(customers),
                'monthly_revenue': monthly_summary.get('total_revenue', 0),
                'monthly_profit': monthly_summary.get('profit', 0)
            }
        }
        return render(request, 'admin_panel/financial_reports.html', context)
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def daily_sales_report(request):
    """–î–µ—Ç–∞–ª—å–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç"""
    try:
        from json_manager import JSONManager
        json_manager = JSONManager()
        
        limit = int(request.GET.get('days', 30))
        daily_sales = json_manager.get_daily_sales(limit=limit)
        
        context = {
            'daily_sales': daily_sales,
            'days_limit': limit
        }
        return render(request, 'admin_panel/daily_sales_report.html', context)
    except Exception as e:
        return HttpResponse(f"–ü–æ–º–∏–ª–∫–∞: {e}")