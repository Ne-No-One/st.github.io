from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator

class SiteSettings(models.Model):
    """–û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∞–π—Ç—É"""
    site_title = models.CharField(max_length=200, default="–ú—ñ–π –°–∞–π—Ç")
    site_description = models.TextField(default="–ö—Ä–∞—Å–∏–≤–∏–π —Å–∞–π—Ç –∑ —á–æ—Ä–Ω–∏–º —Ñ–æ–Ω–æ–º, –ø–ª–∞–≤–∞—é—á–∏–º–∏ –±—ñ–ª–∏–º–∏ —à–∞—Ä–∞–º–∏ —Ç–∞ —Å—É—á–∞—Å–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º")
    hero_section_title = models.CharField(max_length=200, default="–ü—Ä–µ–º—ñ—É–º —Ç–æ–≤–∞—Ä")
    hero_section_description = models.TextField(blank=True)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤
    primary_color = models.CharField(max_length=7, default="#ff8c42", help_text="–û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–ª—ñ—Ä (hex)")
    secondary_color = models.CharField(max_length=7, default="#4ecdc4", help_text="–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä (hex)")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ–π
    hero_section_width_pc = models.IntegerField(default=80, validators=[MinValueValidator(50), MaxValueValidator(100)])
    additional_products_width_pc = models.IntegerField(default=80, validators=[MinValueValidator(50), MaxValueValidator(100)])
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∞–π—Ç—É"
        verbose_name_plural = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∞–π—Ç—É"
    
    def __str__(self):
        return f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∞–π—Ç—É ({self.updated_at.strftime('%d.%m.%Y %H:%M')})"

class ColorOption(models.Model):
    """–ö–æ–ª—å–æ—Ä–æ–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É"""
    name = models.CharField(max_length=50, help_text="–ù–∞–∑–≤–∞ –∫–æ–ª—å–æ—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π)")
    hex_code = models.CharField(max_length=7, help_text="Hex –∫–æ–¥ –∫–æ–ª—å–æ—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: #ff8c42)")
    image = models.ImageField(upload_to='color_images/', help_text="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–ª—å–æ—Ä—É")
    is_active = models.BooleanField(default=True)
    order = models.PositiveIntegerField(default=0, help_text="–ü–æ—Ä—è–¥–æ–∫ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    
    class Meta:
        verbose_name = "–ö–æ–ª—å–æ—Ä–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç"
        verbose_name_plural = "–ö–æ–ª—å–æ—Ä–æ–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏"
        ordering = ['order']
    
    def __str__(self):
        return f"{self.name} ({self.hex_code})"

class QuantityOption(models.Model):
    """–í–∞—Ä—ñ–∞–Ω—Ç–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"""
    quantity = models.PositiveIntegerField(help_text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 21)")
    is_active = models.BooleanField(default=True)
    order = models.PositiveIntegerField(default=0, help_text="–ü–æ—Ä—è–¥–æ–∫ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    
    class Meta:
        verbose_name = "–í–∞—Ä—ñ–∞–Ω—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"
        verbose_name_plural = "–í–∞—Ä—ñ–∞–Ω—Ç–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"
        ordering = ['order']
    
    def __str__(self):
        return f"{self.quantity} –∫–≤—ñ—Ç—ñ–≤"

class MainProduct(models.Model):
    """–ì–æ–ª–æ–≤–Ω–∏–π —Ç–æ–≤–∞—Ä"""
    title = models.CharField(max_length=200, default="–ü—Ä–µ–º—ñ—É–º —Ç–æ–≤–∞—Ä")
    description = models.TextField(blank=True)
    base_price = models.DecimalField(max_digits=10, decimal_places=2, default=2800.00)
    currency = models.CharField(max_length=10, default="–≥—Ä–Ω")
    
    # –ö–Ω–æ–ø–∫–∏
    add_to_cart_text = models.CharField(max_length=50, default="–í –∫–æ—à–∏–∫")
    remove_from_cart_text = models.CharField(max_length=50, default="–ü—Ä–∏–±—Ä–∞—Ç–∏")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    show_premium_label = models.BooleanField(default=True)
    premium_label_text = models.CharField(max_length=50, default="–ü—Ä–µ–º—ñ—É–º —Ç–æ–≤–∞—Ä")
    
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ì–æ–ª–æ–≤–Ω–∏–π —Ç–æ–≤–∞—Ä"
        verbose_name_plural = "–ì–æ–ª–æ–≤–Ω–∏–π —Ç–æ–≤–∞—Ä"
    
    def __str__(self):
        return self.title

class AdditionalProduct(models.Model):
    """–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏"""
    title = models.CharField(max_length=200, help_text="–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É")
    description = models.TextField(blank=True)
    price = models.DecimalField(max_digits=10, decimal_places=2, help_text="–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É")
    currency = models.CharField(max_length=10, default="–≥—Ä–Ω")
    image = models.ImageField(upload_to='additional_products/', help_text="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É")
    
    # –ö–Ω–æ–ø–∫–∏
    add_to_cart_text = models.CharField(max_length=50, default="–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫")
    remove_from_cart_text = models.CharField(max_length=50, default="–í—ñ–¥–Ω—è—Ç–∏ –∑ –∫–æ—à–∏–∫–∞")
    
    is_active = models.BooleanField(default=True)
    order = models.PositiveIntegerField(default=0, help_text="–ü–æ—Ä—è–¥–æ–∫ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–æ–≤–∞—Ä"
        verbose_name_plural = "–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏"
        ordering = ['order']
    
    def __str__(self):
        return self.title

class AdditionalProductsSettings(models.Model):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤"""
    section_title = models.CharField(max_length=200, default="–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏")
    add_all_text = models.CharField(max_length=50, default="–î–æ–¥–∞—Ç–∏ –≤—Å—ñ")
    remove_all_text = models.CharField(max_length=50, default="–ü—Ä–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    show_section = models.BooleanField(default=True)
    max_products_per_row = models.PositiveIntegerField(default=3, validators=[MinValueValidator(1), MaxValueValidator(6)])
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤"
        verbose_name_plural = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤"
    
    def __str__(self):
        return f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó '{self.section_title}'"

class ContactInfo(models.Model):
    """–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"""
    phone = models.CharField(max_length=20, help_text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    email = models.EmailField(help_text="Email –∞–¥—Ä–µ—Å–∞")
    address = models.TextField(help_text="–ê–¥—Ä–µ—Å–∞")
    working_hours = models.CharField(max_length=100, help_text="–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏")
    
    # –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ
    instagram = models.URLField(blank=True, help_text="Instagram URL")
    facebook = models.URLField(blank=True, help_text="Facebook URL")
    telegram = models.URLField(blank=True, help_text="Telegram URL")
    
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
        verbose_name_plural = "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
    
    def __str__(self):
        return f"–ö–æ–Ω—Ç–∞–∫—Ç–∏ ({self.phone})"

class Service(models.Model):
    """–ü–æ—Å–ª—É–≥–∏"""
    title = models.CharField(max_length=200, help_text="–ù–∞–∑–≤–∞ –ø–æ—Å–ª—É–≥–∏")
    description = models.TextField(help_text="–û–ø–∏—Å –ø–æ—Å–ª—É–≥–∏")
    icon = models.CharField(max_length=50, default="üåü", help_text="–Ü–∫–æ–Ω–∫–∞ (emoji –∞–±–æ CSS –∫–ª–∞—Å)")
    
    is_active = models.BooleanField(default=True)
    order = models.PositiveIntegerField(default=0, help_text="–ü–æ—Ä—è–¥–æ–∫ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ü–æ—Å–ª—É–≥–∞"
        verbose_name_plural = "–ü–æ—Å–ª—É–≥–∏"
        ordering = ['order']
    
    def __str__(self):
        return self.title
