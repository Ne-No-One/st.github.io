#!/usr/bin/env python
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ JSON —Ñ–∞–π–ª–æ–º
"""
import json
import os
import logging
from django.conf import settings

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞
logger = logging.getLogger('json_manager')

class JSONManager:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è JSON —Ñ–∞–π–ª–æ–º –∑ –¥–∞–Ω–∏–º–∏"""
    
    def __init__(self):
        logger.info("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è JSONManager")
        try:
            self.data_file = os.path.join(settings.BASE_DIR, 'data.json')
            logger.info(f"üìÅ –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É: {self.data_file}")
            self._ensure_data_file()
            logger.info("‚úÖ JSONManager —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó JSONManager: {e}")
            raise
    
    def _ensure_data_file(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª –¥–∞–Ω–∏—Ö, —è–∫—â–æ –Ω—ñ - —Å—Ç–≤–æ—Ä—é—î–º–æ"""
        logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –¥–∞–Ω–∏—Ö")
        if not os.path.exists(self.data_file):
            logger.warning("‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–∏—Ö –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π")
            default_data = {
                "site_settings": {
                    "site_title": "–ö–≤—ñ—Ç–∫–æ–≤–∏–π –º–∞–≥–∞–∑–∏–Ω",
                    "site_description": "–ö—Ä–∞—Å–∏–≤—ñ –∫–≤—ñ—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–¥—ñ–π"
                },
                "main_product": {
                    "title": "–ü—Ä–µ–º—ñ—É–º –∫–≤—ñ—Ç–∏",
                    "description": "–ù–∞–π–∫—Ä–∞—â—ñ –∫–≤—ñ—Ç–∏ –¥–ª—è –≤–∞—à–∏—Ö –æ—Å–æ–±–ª–∏–≤–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤",
                    "base_price": 2800.00,
                    "currency": "–≥—Ä–Ω",
                    "add_to_cart_text": "–í –∫–æ—à–∏–∫",
                    "show_premium_label": True,
                    "premium_label_text": "–ü—Ä–µ–º—ñ—É–º —Ç–æ–≤–∞—Ä"
                },
                "color_options": [
                    {
                        "id": 1,
                        "name": "–ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π",
                        "hex_code": "#ff8c42",
                        "image_url": "",
                        "is_active": True,
                        "order": 1
                    },
                    {
                        "id": 2,
                        "name": "–ë–ª–∞–∫–∏—Ç–Ω–∏–π", 
                        "hex_code": "#4ecdc4",
                        "image_url": "",
                        "is_active": True,
                        "order": 2
                    }
                ],
                "quantity_options": [
                    {
                        "id": 1,
                        "quantity": 21,
                        "is_active": True,
                        "order": 1
                    },
                    {
                        "id": 2,
                        "quantity": 51,
                        "is_active": True,
                        "order": 2
                    }
                ],
                "additional_products": [
                    {
                        "id": 1,
                        "title": "–ë—É–∫–µ—Ç –∫–≤—ñ—Ç—ñ–≤",
                        "description": "–ö—Ä–∞—Å–∏–≤–∏–π –±—É–∫–µ—Ç —Å–≤—ñ–∂–∏—Ö –∫–≤—ñ—Ç—ñ–≤",
                        "price": 1500.00,
                        "currency": "–≥—Ä–Ω",
                        "image_url": "",
                        "add_to_cart_text": "–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫",
                        "is_active": True,
                        "order": 1
                    }
                ],
                "additional_settings": {
                    "section_title": "–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏",
                    "add_all_text": "–î–æ–¥–∞—Ç–∏ –≤—Å—ñ",
                    "remove_all_text": "–ü—Ä–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ",
                    "show_section": True,
                    "max_products_per_row": 3
                },
                "contact_info": {
                    "phone": "+380 50 123 45 67",
                    "email": "info@example.com",
                    "address": "–ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞",
                    "working_hours": "–ü–Ω-–ü—Ç: 9:00-18:00, –°–±: 10:00-16:00",
                    "is_active": True
                },
                "services": [
                    {
                        "id": 1,
                        "title": "–®–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞",
                        "description": "–î–æ—Å—Ç–∞–≤–ª—è—î–º–æ –≤–∞—à—ñ –∫–≤—ñ—Ç–∏ –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –ø–æ –≤—Å—å–æ–º—É –º—ñ—Å—Ç—É",
                        "icon": "truck",
                        "is_active": True,
                        "order": 1
                    }
                ],
                "about_section": {
                    "title": "–ü—Ä–æ –Ω–∞—Å",
                    "description": "–ú–∏ - –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤, —è–∫—ñ —Å—Ç–≤–æ—Ä—é—é—Ç—å –∫—Ä–∞—Å–∏–≤—ñ –∫–≤—ñ—Ç–∏ –¥–ª—è –≤–∞—à–∏—Ö –æ—Å–æ–±–ª–∏–≤–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤.",
                    "show_section": True
                }
            }
            self.save_data(default_data)
    
    def load_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ JSON —Ñ–∞–π–ª—É"""
        logger.info("üìñ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ JSON —Ñ–∞–π–ª—É")
        try:
            if not os.path.exists(self.data_file):
                logger.error(f"‚ùå –§–∞–π–ª {self.data_file} –Ω–µ —ñ—Å–Ω—É—î")
                return {}
            
            with open(self.data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                logger.info(f"‚úÖ –î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ, —Ä–æ–∑–º—ñ—Ä: {len(str(data))} —Å–∏–º–≤–æ–ª—ñ–≤")
                return data
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
            return {}
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            return {}
    
    def save_data(self, data):
        """–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ JSON —Ñ–∞–π–ª"""
        logger.info("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ JSON —Ñ–∞–π–ª")
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
            if not isinstance(data, dict):
                logger.error("‚ùå –î–∞–Ω—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫–æ–º")
                return False
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
            backup_file = self.data_file + '.backup'
            if os.path.exists(self.data_file):
                import shutil
                shutil.copy2(self.data_file, backup_file)
                logger.info(f"üì¶ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é: {backup_file}")
            
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ, —Ä–æ–∑–º—ñ—Ä: {len(str(data))} —Å–∏–º–≤–æ–ª—ñ–≤")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            return False
    
    def get_site_settings(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∞–π—Ç—É"""
        logger.info("üîß –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–∞–π—Ç—É")
        try:
            data = self.load_data()
            settings = data.get('site_settings', {})
            logger.info(f"‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∞–π—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–æ: {settings}")
            return settings
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–∞–π—Ç—É: {e}")
            return {}
    
    def update_site_settings(self, **kwargs):
        """–û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∞–π—Ç—É"""
        data = self.load_data()
        if 'site_settings' not in data:
            data['site_settings'] = {}
        data['site_settings'].update(kwargs)
        return self.save_data(data)
    
    def get_main_product(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —Ç–æ–≤–∞—Ä"""
        data = self.load_data()
        return data.get('main_product', {})
    
    def update_main_product(self, **kwargs):
        """–û–Ω–æ–≤–ª—é—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —Ç–æ–≤–∞—Ä"""
        data = self.load_data()
        if 'main_product' not in data:
            data['main_product'] = {}
        data['main_product'].update(kwargs)
        return self.save_data(data)
    
    def get_color_options(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–ª—å–æ—Ä–∏"""
        data = self.load_data()
        return data.get('color_options', [])
    
    def add_color_option(self, name, hex_code, image_url="", order=None):
        """–î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∫–æ–ª—ñ—Ä"""
        data = self.load_data()
        colors = data.get('color_options', [])
        new_id = max([c.get('id', 0) for c in colors], default=0) + 1
        if order is None:
            order = len(colors) + 1
        new_color = {
            'id': new_id,
            'name': name,
            'hex_code': hex_code,
            'image_url': image_url,
            'is_active': True,
            'order': order
        }
        colors.append(new_color)
        data['color_options'] = colors
        return self.save_data(data)
    
    def update_color_option(self, color_id, name, hex_code, image_url=""):
        """–û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—ñ—Ä/–≤–∞—Ä—ñ–∞–Ω—Ç —Ç–æ–≤–∞—Ä—É"""
        data = self.load_data()
        colors = data.get('color_options', [])
        for color in colors:
            if color.get('id') == color_id:
                color.update({
                    'name': name,
                    'hex_code': hex_code,
                    'image_url': image_url
                })
                break
        data['color_options'] = colors
        return self.save_data(data)
    
    def delete_color_option(self, color_id):
        """–í–∏–¥–∞–ª—è—î–º–æ –∫–æ–ª—ñ—Ä/–≤–∞—Ä—ñ–∞–Ω—Ç —Ç–æ–≤–∞—Ä—É"""
        data = self.load_data()
        colors = data.get('color_options', [])
        data['color_options'] = [c for c in colors if c.get('id') != color_id]
        return self.save_data(data)
    
    def get_quantity_options(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"""
        data = self.load_data()
        return data.get('quantity_options', [])
    
    def add_quantity_option(self, quantity):
        """–î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (—Å—Ç–∞—Ä–∏–π –º–µ—Ç–æ–¥)"""
        data = self.load_data()
        quantities = data.get('quantity_options', [])
        new_id = max([q.get('id', 0) for q in quantities], default=0) + 1
        new_quantity = {
            'id': new_id,
            'quantity': quantity,
            'is_active': True,
            'order': len(quantities) + 1
        }
        quantities.append(new_quantity)
        data['quantity_options'] = quantities
        return self.save_data(data)
    
    def add_quantity_option_with_price(self, quantity, price_per_unit, order=None):
        """–î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑ —Ü—ñ–Ω–æ—é –∑–∞ –æ–¥–∏–Ω–∏—Ü—é"""
        data = self.load_data()
        quantities = data.get('quantity_options', [])
        new_id = max([q.get('id', 0) for q in quantities], default=0) + 1
        if order is None:
            order = len(quantities) + 1
        new_quantity = {
            'id': new_id,
            'quantity': quantity,
            'price_per_unit': price_per_unit,
            'is_active': True,
            'order': order
        }
        quantities.append(new_quantity)
        data['quantity_options'] = quantities
        return self.save_data(data)
    
    def update_quantity_option(self, quantity_id, quantity, price_per_unit, is_active):
        """–û–Ω–æ–≤–ª—é—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"""
        data = self.load_data()
        quantities = data.get('quantity_options', [])
        for qty in quantities:
            if qty.get('id') == quantity_id:
                qty.update({
                    'quantity': quantity,
                    'price_per_unit': price_per_unit,
                    'is_active': is_active
                })
                break
        data['quantity_options'] = quantities
        return self.save_data(data)
    
    def delete_quantity_option(self, quantity_id):
        """–í–∏–¥–∞–ª—è—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"""
        data = self.load_data()
        quantities = data.get('quantity_options', [])
        data['quantity_options'] = [q for q in quantities if q.get('id') != quantity_id]
        return self.save_data(data)
    
    def get_additional_products(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏"""
        data = self.load_data()
        return data.get('additional_products', [])
    
    def add_additional_product(self, title, description, price, currency, image_url="", add_to_cart_text="–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫"):
        """–î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–æ–≤–∞—Ä"""
        data = self.load_data()
        products = data.get('additional_products', [])
        new_id = max([p.get('id', 0) for p in products], default=0) + 1
        new_product = {
            'id': new_id,
            'title': title,
            'description': description,
            'price': price,
            'currency': currency,
            'image_url': image_url,
            'add_to_cart_text': add_to_cart_text,
            'is_active': True,
            'order': len(products) + 1
        }
        products.append(new_product)
        data['additional_products'] = products
        return self.save_data(data)
    
    def update_additional_product(self, product_id, title, description, price, currency, image_url="", order=None):
        """–û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–æ–≤–∞—Ä"""
        data = self.load_data()
        products = data.get('additional_products', [])
        for product in products:
            if product.get('id') == product_id:
                update_data = {
                    'title': title,
                    'description': description,
                    'price': price,
                    'currency': currency,
                    'image_url': image_url,
                    'add_to_cart_text': '–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫'
                }
                if order is not None:
                    update_data['order'] = order
                product.update(update_data)
                break
        data['additional_products'] = products
        return self.save_data(data)
    
    def delete_additional_product(self, product_id):
        """–í–∏–¥–∞–ª—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–æ–≤–∞—Ä"""
        data = self.load_data()
        products = data.get('additional_products', [])
        data['additional_products'] = [p for p in products if p.get('id') != product_id]
        return self.save_data(data)
    
    def get_services(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–ª—É–≥–∏"""
        data = self.load_data()
        return data.get('services', [])
    
    def add_service(self, title, description, icon):
        """–î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –ø–æ—Å–ª—É–≥—É"""
        data = self.load_data()
        services = data.get('services', [])
        new_id = max([s.get('id', 0) for s in services], default=0) + 1
        new_service = {
            'id': new_id,
            'title': title,
            'description': description,
            'icon': icon,
            'is_active': True,
            'order': len(services) + 1
        }
        services.append(new_service)
        data['services'] = services
        return self.save_data(data)
    
    def get_contact_info(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é"""
        data = self.load_data()
        return data.get('contact_info', {})
    
    def update_contact_info(self, phone, email, address, working_hours):
        """–û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é"""
        data = self.load_data()
        data['contact_info'] = {
            'phone': phone,
            'email': email,
            'address': address,
            'working_hours': working_hours,
            'is_active': True
        }
        return self.save_data(data)
    
    def get_about_section(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ —Å–µ–∫—Ü—ñ—é '–ü—Ä–æ –Ω–∞—Å'"""
        data = self.load_data()
        return data.get('about_section', {})
    
    def update_about_section(self, title, description, show_section=True):
        """–û–Ω–æ–≤–ª—é—î–º–æ —Å–µ–∫—Ü—ñ—é '–ü—Ä–æ –Ω–∞—Å'"""
        data = self.load_data()
        data['about_section'] = {
            'title': title,
            'description': description,
            'show_section': show_section
        }
        return self.save_data(data)
    
    def update_additional_settings(self, **kwargs):
        """–û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        data = self.load_data()
        if 'additional_settings' not in data:
            data['additional_settings'] = {}
        data['additional_settings'].update(kwargs)
        return self.save_data(data)
    
    # ===== ORDERS MANAGEMENT =====
    
    def get_orders(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        logger.info("üìã –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å")
        data = self.load_data()
        orders = data.get('orders', [])
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
        orders.sort(key=lambda x: x.get('order_date', ''), reverse=True)
        logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(orders)} –∑–∞–º–æ–≤–ª–µ–Ω—å")
        return orders
    
    def get_order_by_id(self, order_id):
        """–û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID"""
        logger.info(f"üîç –ü–æ—à—É–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID: {order_id}")
        orders = self.get_orders()
        for order in orders:
            if order.get('id') == int(order_id):
                logger.info(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ: {order.get('order_number')}")
                return order
        logger.warning(f"‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID {order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return None
    
    def update_order_status(self, order_id, new_status):
        """–û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        logger.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –Ω–∞ '{new_status}'")
        data = self.load_data()
        orders = data.get('orders', [])
        
        for order in orders:
            if order.get('id') == int(order_id):
                order['status'] = new_status
                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order.get('order_number')} –æ–Ω–æ–≤–ª–µ–Ω–æ")
                return self.save_data(data)
        
        logger.error(f"‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID {order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    def get_orders_by_status(self, status):
        """–û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º"""
        logger.info(f"üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
        orders = self.get_orders()
        filtered_orders = [order for order in orders if order.get('status') == status]
        logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(filtered_orders)} –∑–∞–º–æ–≤–ª–µ–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'")
        return filtered_orders
    
    # ===== CUSTOMERS MANAGEMENT =====
    
    def get_customers(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
        logger.info("üë• –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        data = self.load_data()
        customers = data.get('customers', [])
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑–∞–≥–∞–ª—å–Ω–æ—é —Å—É–º–æ—é –ø–æ–∫—É–ø–æ–∫ (VIP —Å–ø–æ—á–∞—Ç–∫—É)
        customers.sort(key=lambda x: x.get('total_spent', 0), reverse=True)
        logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(customers)} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        return customers
    
    def get_customer_by_id(self, customer_id):
        """–û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID"""
        logger.info(f"üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ –∑ ID: {customer_id}")
        customers = self.get_customers()
        for customer in customers:
            if customer.get('id') == int(customer_id):
                logger.info(f"‚úÖ –ö–ª—ñ—î–Ω—Ç –∑–Ω–∞–π–¥–µ–Ω–∏–π: {customer.get('name')}")
                return customer
        logger.warning(f"‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –∑ ID {customer_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        return None
    
    def add_customer(self, customer_data):
        """–î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞"""
        logger.info(f"‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: {customer_data.get('name')}")
        data = self.load_data()
        customers = data.get('customers', [])
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π ID
        new_id = max([c.get('id', 0) for c in customers], default=0) + 1
        customer_data['id'] = new_id
        
        customers.append(customer_data)
        data['customers'] = customers
        
        if self.save_data(data):
            logger.info(f"‚úÖ –ö–ª—ñ—î–Ω—Ç –¥–æ–¥–∞–Ω –∑ ID: {new_id}")
            return new_id
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞")
        return None
    
    def update_customer(self, customer_id, customer_data):
        """–û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞"""
        logger.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ ID: {customer_id}")
        data = self.load_data()
        customers = data.get('customers', [])
        
        for i, customer in enumerate(customers):
            if customer.get('id') == int(customer_id):
                customers[i].update(customer_data)
                data['customers'] = customers
                if self.save_data(data):
                    logger.info(f"‚úÖ –ö–ª—ñ—î–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω: {customer_data.get('name', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}")
                    return True
                break
        
        logger.error(f"‚ùå –ö–ª—ñ—î–Ω—Ç –∑ ID {customer_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        return False
    
    # ===== INVENTORY MANAGEMENT =====
    
    def get_inventory(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä"""
        logger.info("üì¶ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é")
        data = self.load_data()
        inventory = data.get('inventory', [])
        logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(inventory)} –ø–æ–∑–∏—Ü—ñ–π –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ")
        return inventory
    
    def get_low_stock_items(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –Ω–∏–∑—å–∫–∏–º–∏ –∑–∞–ª–∏—à–∫–∞–º–∏"""
        logger.info("‚ö†Ô∏è –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –Ω–∏–∑—å–∫–∏–º–∏ –∑–∞–ª–∏—à–∫–∞–º–∏")
        inventory = self.get_inventory()
        low_stock = [item for item in inventory 
                    if item.get('current_stock', 0) <= item.get('min_stock', 0)]
        logger.info(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(low_stock)} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –Ω–∏–∑—å–∫–∏–º–∏ –∑–∞–ª–∏—à–∫–∞–º–∏")
        return low_stock
    
    def update_stock(self, item_id, new_stock):
        """–û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ"""
        logger.info(f"üì¶ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–ª–∞–¥—É –¥–ª—è —Ç–æ–≤–∞—Ä—É ID: {item_id}")
        data = self.load_data()
        inventory = data.get('inventory', [])
        
        for item in inventory:
            if item.get('id') == int(item_id):
                item['current_stock'] = new_stock
                data['inventory'] = inventory
                if self.save_data(data):
                    logger.info(f"‚úÖ –°–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ: {item.get('name')} = {new_stock}")
                    return True
                break
        
        logger.error(f"‚ùå –¢–æ–≤–∞—Ä –∑ ID {item_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        return False
    
    # ===== FINANCIAL REPORTS =====
    
    def get_financial_reports(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –∑–≤—ñ—Ç–∏"""
        logger.info("üí∞ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –∑–≤—ñ—Ç—ñ–≤")
        data = self.load_data()
        reports = data.get('financial_reports', {})
        logger.info("‚úÖ –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –∑–≤—ñ—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ")
        return reports
    
    def get_daily_sales(self, limit=30):
        """–û—Ç—Ä–∏–º—É—î–º–æ —â–æ–¥–µ–Ω–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ"""
        logger.info(f"üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤ (–æ—Å—Ç–∞–Ω–Ω—ñ {limit} –¥–Ω—ñ–≤)")
        reports = self.get_financial_reports()
        daily_sales = reports.get('daily_sales', [])
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É) —ñ –æ–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        daily_sales.sort(key=lambda x: x.get('date', ''), reverse=True)
        return daily_sales[:limit]
    
    def get_monthly_summary(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ –º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç"""
        logger.info("üìà –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—è—á–Ω–æ–≥–æ –∑–≤—ñ—Ç—É")
        reports = self.get_financial_reports()
        return reports.get('monthly_summary', {})
    
    def get_additional_settings(self):
        """–û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤"""
        data = self.load_data()
        return data.get('additional_settings', {})
