"""
Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
"""
import logging
import time

logger = logging.getLogger('django.request')

class RequestLoggingMiddleware:
    """Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö HTTP –∑–∞–ø–∏—Ç—ñ–≤"""
    
    def __init__(self, get_response):
        self.get_response = get_response
    
    def __call__(self, request):
        # –õ–æ–≥—É—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Ç—É
        start_time = time.time()
        logger.info(f"üåê –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Ç—É: {request.method} {request.path}")
        logger.info(f"   User-Agent: {request.META.get('HTTP_USER_AGENT', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        logger.info(f"   IP: {self.get_client_ip(request)}")
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
        response = self.get_response(request)
        
        # –õ–æ–≥—É—î–º–æ –∫—ñ–Ω–µ—Ü—å –∑–∞–ø–∏—Ç—É
        end_time = time.time()
        duration = (end_time - start_time) * 1000  # –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
        
        status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
        logger.info(f"{status_emoji} –ö—ñ–Ω–µ—Ü—å –∑–∞–ø–∏—Ç—É: {request.method} {request.path}")
        logger.info(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        logger.info(f"   –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration:.2f}ms")
        
        return response
    
    def get_client_ip(self, request):
        """–û—Ç—Ä–∏–º—É—î–º–æ IP –∞–¥—Ä–µ—Å—É –∫–ª—ñ—î–Ω—Ç–∞"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip
