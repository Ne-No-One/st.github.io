"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É Django
"""
import os
import json
import logging
from pathlib import Path
from django.conf import settings
from django.core.exceptions import ImproperlyConfigured

logger = logging.getLogger('startup_checks')

class StartupValidator:
    """–ö–ª–∞—Å –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
    
    def __init__(self):
        self.errors = []
        self.warnings = []
        
    def validate_all(self):
        """–í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
        logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É Django")
        
        self.check_directories()
        self.check_json_file()
        self.check_static_files()
        self.check_templates()
        self.check_sessions()
        
        if self.errors:
            logger.error(f"‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ {len(self.errors)} –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫:")
            for error in self.errors:
                logger.error(f"   - {error}")
            raise ImproperlyConfigured(f"–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {'; '.join(self.errors)}")
        
        if self.warnings:
            logger.warning(f"‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {len(self.warnings)} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å:")
            for warning in self.warnings:
                logger.warning(f"   - {warning}")
        
        logger.info("‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        
    def check_directories(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
        logger.info("üìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...")
        
        required_dirs = [
            settings.BASE_DIR / 'static',
            settings.BASE_DIR / 'static' / 'css',
            settings.BASE_DIR / 'static' / 'js', 
            settings.BASE_DIR / 'static' / 'images',
            settings.BASE_DIR / 'templates',
            settings.BASE_DIR / 'templates' / 'admin_panel',
            settings.BASE_DIR / 'sessions',
        ]
        
        for dir_path in required_dirs:
            if not dir_path.exists():
                try:
                    dir_path.mkdir(parents=True, exist_ok=True)
                    logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {dir_path}")
                except Exception as e:
                    self.errors.append(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é {dir_path}: {e}")
            else:
                logger.debug(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —ñ—Å–Ω—É—î: {dir_path}")
                
    def check_json_file(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ JSON —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏"""
        logger.info("üìÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ JSON —Ñ–∞–π–ª—É...")
        
        json_file = settings.BASE_DIR / 'data.json'
        
        if not json_file.exists():
            logger.warning("‚ö†Ô∏è –§–∞–π–ª data.json –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ...")
            self.create_default_json(json_file)
        else:
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —Å–µ–∫—Ü—ñ—ó
                required_sections = [
                    'site_settings', 'main_product', 'color_options', 
                    'quantity_options', 'additional_products', 'additional_settings',
                    'contact_info', 'services', 'about_section'
                ]
                
                missing_sections = []
                for section in required_sections:
                    if section not in data:
                        missing_sections.append(section)
                
                if missing_sections:
                    self.warnings.append(f"–í—ñ–¥—Å—É—Ç–Ω—ñ —Å–µ–∫—Ü—ñ—ó –≤ JSON: {', '.join(missing_sections)}")
                    # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Å–µ–∫—Ü—ñ—ó
                    self.add_missing_sections(json_file, data, missing_sections)
                else:
                    logger.info("‚úÖ JSON —Ñ–∞–π–ª –º–∞—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å–µ–∫—Ü—ñ—ó")
                    
            except json.JSONDecodeError as e:
                self.errors.append(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON —Ñ–∞–π–ª: {e}")
            except Exception as e:
                self.errors.append(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è JSON —Ñ–∞–π–ª—É: {e}")
                
    def create_default_json(self, json_file):
        """–°—Ç–≤–æ—Ä—é—î–º–æ JSON —Ñ–∞–π–ª –∑ –±–∞–∑–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏"""
        default_data = {
            "site_settings": {
                "site_title": "–ö–≤—ñ—Ç–∫–æ–≤–∏–π –º–∞–≥–∞–∑–∏–Ω",
                "site_description": "–ö—Ä–∞—Å–∏–≤—ñ –∫–≤—ñ—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–¥—ñ–π"
            },
            "main_product": {
                "title": "–ü—Ä–µ–º—ñ—É–º –∫–≤—ñ—Ç–∏",
                "description": "–ù–∞–π–∫—Ä–∞—â—ñ –∫–≤—ñ—Ç–∏ –¥–ª—è –≤–∞—à–∏—Ö –æ—Å–æ–±–ª–∏–≤–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤",
                "base_price": 2800.00,
                "currency": "–≥—Ä–Ω",
                "add_to_cart_text": "–í –∫–æ—à–∏–∫",
                "show_premium_label": True,
                "premium_label_text": "–ü—Ä–µ–º—ñ—É–º —Ç–æ–≤–∞—Ä"
            },
            "color_options": [
                {
                    "id": 1,
                    "name": "–ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π",
                    "hex_code": "#ff8c42", 
                    "image_url": "https://via.placeholder.com/400x300/ff8c42/ffffff?text=–ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π",
                    "is_active": True,
                    "order": 1
                }
            ],
            "quantity_options": [
                {"id": 1, "quantity": 21, "is_active": True, "order": 1},
                {"id": 2, "quantity": 51, "is_active": True, "order": 2},
                {"id": 3, "quantity": 101, "is_active": True, "order": 3}
            ],
            "additional_products": [
                {
                    "id": 1,
                    "title": "–ë—É–∫–µ—Ç –∫–≤—ñ—Ç—ñ–≤",
                    "description": "–ö—Ä–∞—Å–∏–≤–∏–π –±—É–∫–µ—Ç —Å–≤—ñ–∂–∏—Ö –∫–≤—ñ—Ç—ñ–≤",
                    "price": 1500.00,
                    "currency": "–≥—Ä–Ω",
                    "image_url": "https://via.placeholder.com/300x200/4ecdc4/ffffff?text=–ë—É–∫–µ—Ç",
                    "add_to_cart_text": "–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫",
                    "is_active": True,
                    "order": 1
                }
            ],
            "additional_settings": {
                "section_title": "–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏",
                "add_all_text": "–î–æ–¥–∞—Ç–∏ –≤—Å—ñ",
                "remove_all_text": "–ü—Ä–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ",
                "show_section": True,
                "max_products_per_row": 3
            },
            "contact_info": {
                "phone": "+380 50 123 45 67",
                "email": "info@flowers.com",
                "address": "–ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞",
                "working_hours": "–ü–Ω-–ü—Ç: 9:00-18:00, –°–±: 10:00-16:00",
                "is_active": True
            },
            "services": [
                {
                    "id": 1,
                    "title": "–®–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞",
                    "description": "–î–æ—Å—Ç–∞–≤–ª—è—î–º–æ –≤–∞—à—ñ –∫–≤—ñ—Ç–∏ –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —Ç–µ—Ä–º—ñ–Ω–∏",
                    "icon": "truck",
                    "is_active": True,
                    "order": 1
                },
                {
                    "id": 2,
                    "title": "–°–≤—ñ–∂—ñ –∫–≤—ñ—Ç–∏", 
                    "description": "–¢—ñ–ª—å–∫–∏ –Ω–∞–π—Å–≤—ñ–∂—ñ—à—ñ –∫–≤—ñ—Ç–∏ –≤—ñ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤",
                    "icon": "leaf",
                    "is_active": True,
                    "order": 2
                }
            ],
            "about_section": {
                "title": "–ü—Ä–æ –Ω–∞—Å",
                "description": "–ú–∏ - –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤, —è–∫–∞ –≤–∂–µ –±—ñ–ª—å—à–µ 10 —Ä–æ–∫—ñ–≤ –∑–∞–π–º–∞—î—Ç—å—Å—è –ø—Ä–æ–¥–∞–∂–µ–º –Ω–∞–π–∫—Ä–∞—Å–∏–≤—ñ—à–∏—Ö –∫–≤—ñ—Ç—ñ–≤.",
                "show_section": True
            }
        }
        
        try:
            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(default_data, f, ensure_ascii=False, indent=2)
            logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –±–∞–∑–æ–≤–∏–π JSON —Ñ–∞–π–ª")
        except Exception as e:
            self.errors.append(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ JSON —Ñ–∞–π–ª: {e}")
            
    def add_missing_sections(self, json_file, data, missing_sections):
        """–î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Å–µ–∫—Ü—ñ—ó –≤ JSON"""
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å–µ–∫—Ü—ñ—ó
        logger.info(f"–î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Å–µ–∫—Ü—ñ—ó: {', '.join(missing_sections)}")
        
    def check_static_files(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏"""
        logger.info("üé® –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
        
        static_files = [
            settings.BASE_DIR / 'static' / 'css' / 'style.css',
            settings.BASE_DIR / 'static' / 'js' / 'main.js'
        ]
        
        for file_path in static_files:
            if not file_path.exists():
                self.warnings.append(f"–°—Ç–∞—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: {file_path}")
            else:
                logger.debug(f"‚úÖ –°—Ç–∞—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª —ñ—Å–Ω—É—î: {file_path}")
                
    def check_templates(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à–∞–±–ª–æ–Ω–∏"""
        logger.info("üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —à–∞–±–ª–æ–Ω—ñ–≤...")
        
        required_templates = [
            settings.BASE_DIR / 'templates' / 'index.html',
            settings.BASE_DIR / 'templates' / 'admin_panel' / 'base.html',
            settings.BASE_DIR / 'templates' / 'admin_panel' / 'dashboard.html'
        ]
        
        for template_path in required_templates:
            if not template_path.exists():
                self.errors.append(f"–ö—Ä–∏—Ç–∏—á–Ω–∏–π —à–∞–±–ª–æ–Ω –Ω–µ —ñ—Å–Ω—É—î: {template_path}")
            else:
                logger.debug(f"‚úÖ –®–∞–±–ª–æ–Ω —ñ—Å–Ω—É—î: {template_path}")
                
    def check_sessions(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è sessions"""
        logger.info("üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ sessions...")
        
        if hasattr(settings, 'SESSION_FILE_PATH'):
            session_path = Path(settings.SESSION_FILE_PATH)
            if not session_path.exists():
                try:
                    session_path.mkdir(parents=True, exist_ok=True)
                    logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é sessions: {session_path}")
                except Exception as e:
                    self.errors.append(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é sessions: {e}")
            else:
                logger.debug(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è sessions —ñ—Å–Ω—É—î: {session_path}")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–∞
startup_validator = StartupValidator()

def run_startup_checks():
    """–ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ"""
    try:
        startup_validator.validate_all()
        return True
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
        return False
